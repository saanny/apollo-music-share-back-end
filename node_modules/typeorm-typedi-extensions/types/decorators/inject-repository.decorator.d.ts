/**
 * Injects the requested custom repository object using TypeDI's container. To make injection work without explicity
 * specifying the type in the decorator, you must annotate your properties and/or parameters with the correct type!
 *
 * ```ts
 * class SampleClass {
 *  \@InjectRepository()
 *   userRepository: UserRepository;
 *
 *   constructor(@InjectRepository() private userRepository: UserRepository) {}
 * }
 * ```
 */
export declare function InjectRepository(): CallableFunction;
export declare function InjectRepository(connectionName: string): CallableFunction;
/**
 * Injects the requested `Repository`, `MongoRepository`, `TreeRepository` object using TypeDI's container.
 * To make injection work without explicity specifying the type in the decorator, you must annotate your properties
 * and/or parameters with the correct type!
 *
 * ```ts
 * class SampleClass {
 *  \@InjectRepository(User)
 *   userRepository: Repository<User>;
 *
 *   constructor(@InjectRepository(User) private userRepository: Repository<User>) {}
 * }
 * ```
 */
export declare function InjectRepository(entityType: Function): CallableFunction;
/**
 * Injects the requested `Repository`, `MongoRepository`, `TreeRepository` object using TypeDI's container.
 * To make injection work without explicity specifying the type in the decorator, you must annotate your properties
 * and/or parameters with the correct type!
 *
 * ```ts
 * class SampleClass {
 *  \@InjectRepository(User, "test-conn")
 *   userRepository: Repository<User>;
 *
 *   constructor(@InjectRepository(User, "test-conn") private userRepository: Repository<User>) {}
 * }
 * ```
 */
export declare function InjectRepository(entityType: Function, connectionName: string): CallableFunction;
