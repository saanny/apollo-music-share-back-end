{"version":3,"file":"manager-not-found.error.js","sourceRoot":"","sources":["../../../src/errors/manager-not-found.error.ts"],"names":[],"mappings":";;;;;;;;;;;;;AAAA;;GAEG;AACH;IAA6C,2CAAK;IAWhD;;;;OAIG;IACH,iCAAoB,cAAuB;QAA3C,YACE,iBAAO,SACR;QAFmB,oBAAc,GAAd,cAAc,CAAS;QAfpC,UAAI,GAAG,sBAAsB,CAAC;;IAiBrC,CAAC;IAfD,sBAAW,4CAAO;aAAlB;YACE,OAAO,CACL,uCAAoC,IAAI,CAAC,cAAc,oCAAgC;gBACvF,uGAAqG;gBACrG,yEAAyE,CAC1E,CAAC;QACJ,CAAC;;;OAAA;IAUH,8BAAC;AAAD,CAAC,AAnBD,CAA6C,KAAK,GAmBjD","sourcesContent":["/**\n * Raised when the requested connection doesn't exists in TypeORM.\n */\nexport class ConnectionNotFoundError extends Error {\n  public name = 'ManagerNotFoundError';\n\n  public get message() {\n    return (\n      `Cannot get Connection with name \"${this.connectionName}\" from the ConnectionManager. ` +\n      `Make sure you have created the connection and called \"useContainer(Container)\" in your application ` +\n      `before establishing a connection and importing any entity into TypeORM.`\n    );\n  }\n\n  /**\n   * Creates a new ManagerNotFoundError what is raised when we cannot request a manager from TypeORM.\n   * @param type type of the requested manager\n   * @param connectionName optional name of the manager\n   */\n  constructor(private connectionName?: string) {\n    super();\n  }\n}\n"]}