{"version":3,"file":"container-provider.class.js","sourceRoot":"","sources":["../../src/container-provider.class.ts"],"names":[],"mappings":";;;AACA,mCAAkD;AAElD;;GAEG;AACH,MAAa,uBAAuB;IAClC,GAAG,CAAI,aAA+B;QACpC;;;WAGG;QACH,IAAI,CAAC,kBAAS,CAAC,GAAG,CAAC,aAAiC,CAAC,EAAE;YACrD,kBAAS,CAAC,GAAG,CAAC,EAAE,EAAE,EAAE,aAAa,EAAE,IAAI,EAAE,aAAiC,EAAE,CAAC,CAAC;SAC/E;QAED,OAAO,kBAAS,CAAC,GAAG,CAAC,aAAiC,CAAC,CAAC;IAC1D,CAAC;CACF;AAZD,0DAYC","sourcesContent":["import { ContainedType, ContainerInterface } from 'typeorm';\nimport { Container, Constructable } from 'typedi';\n\n/**\n * Class transforming between TypeDI API and the expected API by TypeORM.\n */\nexport class TypeDIContainerProvider implements ContainerInterface {\n  get<T>(constructable: ContainedType<T>) {\n    /**\n     * TypeDI only resolves values for registered types, so we need to register\n     * them before to requesting them from the default container.\n     */\n    if (!Container.has(constructable as Constructable<T>)) {\n      Container.set({ id: constructable, type: constructable as Constructable<T> });\n    }\n\n    return Container.get(constructable as Constructable<T>);\n  }\n}\n"]}