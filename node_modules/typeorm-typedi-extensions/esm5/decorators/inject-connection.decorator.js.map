{"version":3,"file":"inject-connection.decorator.js","sourceRoot":"","sources":["../../../src/decorators/inject-connection.decorator.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,iBAAiB,EAAE,MAAM,SAAS,CAAC;AAC5C,OAAO,EAAE,SAAS,EAAiB,MAAM,QAAQ,CAAC;AAClD,OAAO,EAAE,uBAAuB,EAAE,MAAM,mCAAmC,CAAC;AAE5E;;;GAGG;AACH,MAAM,UAAU,gBAAgB,CAAC,cAAkC;IAAlC,+BAAA,EAAA,0BAAkC;IACjE,OAAO,UAAU,MAAc,EAAE,YAA6B,EAAE,KAAc;QAC5E,SAAS,CAAC,eAAe,CAAC;YACxB,MAAM,EAAE,MAAgC;YACxC,KAAK,EAAE,KAAK;YACZ,YAAY,EAAE,YAAsB;YACpC,KAAK,EAAE,UAAA,iBAAiB;gBACtB,IAAM,iBAAiB,GAAG,iBAAiB,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;gBAEnE,IAAI,CAAC,iBAAiB,CAAC,GAAG,CAAC,cAAc,CAAC,EAAE;oBAC1C,MAAM,IAAI,uBAAuB,CAAC,cAAc,CAAC,CAAC;iBACnD;gBAED,OAAO,iBAAiB,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC;YAC/C,CAAC;SACF,CAAC,CAAC;IACL,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import { ConnectionManager } from 'typeorm';\nimport { Container, Constructable } from 'typedi';\nimport { ConnectionNotFoundError } from '../errors/manager-not-found.error';\n\n/**\n * Injects the `Connection` object using TypeDI's container.\n * This decorator can be used both as class property decorator or constructor parameter decorator.\n */\nexport function InjectConnection(connectionName: string = 'default'): CallableFunction {\n  return function (object: Object, propertyName: string | symbol, index?: number): void {\n    Container.registerHandler({\n      object: object as Constructable<unknown>,\n      index: index,\n      propertyName: propertyName as string,\n      value: containerInstance => {\n        const connectionManager = containerInstance.get(ConnectionManager);\n\n        if (!connectionManager.has(connectionName)) {\n          throw new ConnectionNotFoundError(connectionName);\n        }\n\n        return connectionManager.get(connectionName);\n      },\n    });\n  };\n}\n"]}