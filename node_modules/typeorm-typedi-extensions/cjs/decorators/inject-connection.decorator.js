"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.InjectConnection = void 0;
const typeorm_1 = require("typeorm");
const typedi_1 = require("typedi");
const manager_not_found_error_1 = require("../errors/manager-not-found.error");
/**
 * Injects the `Connection` object using TypeDI's container.
 * This decorator can be used both as class property decorator or constructor parameter decorator.
 */
function InjectConnection(connectionName = 'default') {
    return function (object, propertyName, index) {
        typedi_1.Container.registerHandler({
            object: object,
            index: index,
            propertyName: propertyName,
            value: containerInstance => {
                const connectionManager = containerInstance.get(typeorm_1.ConnectionManager);
                if (!connectionManager.has(connectionName)) {
                    throw new manager_not_found_error_1.ConnectionNotFoundError(connectionName);
                }
                return connectionManager.get(connectionName);
            },
        });
    };
}
exports.InjectConnection = InjectConnection;
//# sourceMappingURL=inject-connection.decorator.js.map