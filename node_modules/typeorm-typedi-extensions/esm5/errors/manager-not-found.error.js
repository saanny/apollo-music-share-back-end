var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * Raised when the requested connection doesn't exists in TypeORM.
 */
var ConnectionNotFoundError = /** @class */ (function (_super) {
    __extends(ConnectionNotFoundError, _super);
    /**
     * Creates a new ManagerNotFoundError what is raised when we cannot request a manager from TypeORM.
     * @param type type of the requested manager
     * @param connectionName optional name of the manager
     */
    function ConnectionNotFoundError(connectionName) {
        var _this = _super.call(this) || this;
        _this.connectionName = connectionName;
        _this.name = 'ManagerNotFoundError';
        return _this;
    }
    Object.defineProperty(ConnectionNotFoundError.prototype, "message", {
        get: function () {
            return ("Cannot get Connection with name \"" + this.connectionName + "\" from the ConnectionManager. " +
                "Make sure you have created the connection and called \"useContainer(Container)\" in your application " +
                "before establishing a connection and importing any entity into TypeORM.");
        },
        enumerable: false,
        configurable: true
    });
    return ConnectionNotFoundError;
}(Error));
export { ConnectionNotFoundError };
//# sourceMappingURL=manager-not-found.error.js.map