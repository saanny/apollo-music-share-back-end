import { Container } from 'typedi';
/**
 * Class transforming between TypeDI API and the expected API by TypeORM.
 */
var TypeDIContainerProvider = /** @class */ (function () {
    function TypeDIContainerProvider() {
    }
    TypeDIContainerProvider.prototype.get = function (constructable) {
        /**
         * TypeDI only resolves values for registered types, so we need to register
         * them before to requesting them from the default container.
         */
        if (!Container.has(constructable)) {
            Container.set({ id: constructable, type: constructable });
        }
        return Container.get(constructable);
    };
    return TypeDIContainerProvider;
}());
export { TypeDIContainerProvider };
//# sourceMappingURL=container-provider.class.js.map