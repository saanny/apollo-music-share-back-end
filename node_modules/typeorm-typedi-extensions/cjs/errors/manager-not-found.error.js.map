{"version":3,"file":"manager-not-found.error.js","sourceRoot":"","sources":["../../../src/errors/manager-not-found.error.ts"],"names":[],"mappings":";;;AAAA;;GAEG;AACH,MAAa,uBAAwB,SAAQ,KAAK;IAWhD;;;;OAIG;IACH,YAAoB,cAAuB;QACzC,KAAK,EAAE,CAAC;QADU,mBAAc,GAAd,cAAc,CAAS;QAfpC,SAAI,GAAG,sBAAsB,CAAC;IAiBrC,CAAC;IAfD,IAAW,OAAO;QAChB,OAAO,CACL,oCAAoC,IAAI,CAAC,cAAc,gCAAgC;YACvF,qGAAqG;YACrG,yEAAyE,CAC1E,CAAC;IACJ,CAAC;CAUF;AAnBD,0DAmBC","sourcesContent":["/**\n * Raised when the requested connection doesn't exists in TypeORM.\n */\nexport class ConnectionNotFoundError extends Error {\n  public name = 'ManagerNotFoundError';\n\n  public get message() {\n    return (\n      `Cannot get Connection with name \"${this.connectionName}\" from the ConnectionManager. ` +\n      `Make sure you have created the connection and called \"useContainer(Container)\" in your application ` +\n      `before establishing a connection and importing any entity into TypeORM.`\n    );\n  }\n\n  /**\n   * Creates a new ManagerNotFoundError what is raised when we cannot request a manager from TypeORM.\n   * @param type type of the requested manager\n   * @param connectionName optional name of the manager\n   */\n  constructor(private connectionName?: string) {\n    super();\n  }\n}\n"]}